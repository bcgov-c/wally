"""add 3 First Nations layers

Revision ID: db6313a85cf5
Revises: a2b8d50d796d
Create Date: 2019-11-16 07:07:19.038835

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import geoalchemy2

# revision identifiers, used by Alembic.
revision = 'db6313a85cf5'
down_revision = 'a2b8d50d796d'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('fn_treaty_lands',
        sa.Column('ogc_fid', sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column('TREATY_LAND_ID', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column('TREATY', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('EFFECTIVE_DATE', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('FIRST_NATION_NAME', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('LAND_TYPE', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('CHAPTER_REFERENCE', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('APPENDIX_REFERENCE', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('COMMENTS', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('FEATURE_CODE', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('OBJECTID', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column('SE_ANNO_CAD_DATA', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('FEATURE_AREA_SQM', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
        sa.Column('FEATURE_LENGTH_M', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
        sa.Column('GEOMETRY.area', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column('GEOMETRY.len', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column('FME_FEATURE_TYPE', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('SHAPE', geoalchemy2.types.Geometry(srid=4326), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint('ogc_fid', name='fn_treaty_lands_pkey')
    )
    op.create_index('fn_treaty_lands_shape_geom_idx', 'fn_treaty_lands', ['SHAPE'], unique=False, postgresql_using="gist")

    op.create_table('fn_community_locations',
        sa.Column('ogc_fid', sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column('COMMUNITY_LOCATION_ID', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column('FIRST_NATION_BC_NAME', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('FIRST_NATION_FEDERAL_NAME', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('FIRST_NATION_FEDERAL_ID', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column('URL_TO_BC_WEBSITE', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('URL_TO_FEDERAL_WEBSITE', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('URL_TO_FIRST_NATION_WEBSITE', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('MEMBER_ORGANIZATION_NAMES', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('LANGUAGE_GROUP', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('BC_REGIONAL_OFFICE', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('MAPSHEET_NUMBER', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('PREFERRED_NAME', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('ALTERNATIVE_NAME_1', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('ALTERNATIVE_NAME_2', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('ADDRESS_LINE1', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('ADDRESS_LINE2', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('OFFICE_CITY', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('OFFICE_PROVINCE', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('OFFICE_POSTAL_CODE', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('LOCATION_DESCRIPTION', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('SITE_NAME', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('SITE_NUMBER', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('COMMENTS', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('OBJECTID', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column('SE_ANNO_CAD_DATA', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('fme_feature_type', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('SHAPE', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint('ogc_fid', name='fn_community_locations_pkey')
    )
    op.create_index('fn_community_locations_shape_geom_idx', 'fn_community_locations', ['SHAPE'], unique=False, postgresql_using="gist")

    op.create_table('fn_treaty_areas',
        sa.Column('ogc_fid', sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column('TREATY_AREA_ID', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column('TREATY', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('EFFECTIVE_DATE', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('FIRST_NATION_NAME', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('AREA_TYPE', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('LAND_TYPE', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('GEOGRAPHIC_LOCATION', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('CHAPTER_REFERENCE', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('APPENDIX_REFERENCE', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('COMMENTS', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('FEATURE_CODE', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('SE_ANNO_CAD_DATA', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('OBJECTID', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column('FEATURE_AREA_SQM', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
        sa.Column('FEATURE_LENGTH_M', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
        sa.Column('GEOMETRY.AREA', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column('GEOMETRY.LEN', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column('fme_feature_type', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('SHAPE', geoalchemy2.types.Geometry(srid=4326), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint('ogc_fid', name='fn_treaty_areas_pkey')
    )
    op.create_index('fn_treaty_areas_shape_geom_idx', 'fn_treaty_areas', ['SHAPE'], unique=False, postgresql_using="gist")

    op.execute('SET search_path TO metadata')

    # add sequences to columns that are missing them.
    op.execute("""
        CREATE SEQUENCE vector_catalogue_id_seq;
        CREATE SEQUENCE data_source_id_seq;
        SELECT setval('vector_catalogue_id_seq',
                        COALESCE((SELECT MAX(vector_catalogue_id)+1 FROM vector_catalogue), 1),
                        false);
        SELECT setval('data_source_id_seq',
                        COALESCE((SELECT MAX(data_source_id)+1 FROM data_source), 1),
                        false);
        ALTER TABLE vector_catalogue
            ALTER COLUMN vector_catalogue_id SET DEFAULT NEXTVAL('vector_catalogue_id_seq');
        ALTER TABLE data_source
            ALTER COLUMN data_source_id SET DEFAULT NEXTVAL('data_source_id_seq');
        ALTER SEQUENCE vector_catalogue_id_seq OWNED BY vector_catalogue.vector_catalogue_id;
        ALTER SEQUENCE data_source_id_seq OWNED BY data_source.data_source_id;
    """)


    # add metadata for this layer.

    # populate fn_community_locations info
    op.execute("""
    WITH vc_id AS (
                INSERT INTO vector_catalogue (
                vector_catalogue_id,
                description, 
                vector_name,
                create_user, create_date, update_user, update_date, effective_date, expiry_date
            ) VALUES (
                NEXTVAL(pg_get_serial_sequence('vector_catalogue','vector_catalogue_id')),
                'First Nations Community Locations', 
                'fn_community_locations',
                'ETL_USER', CURRENT_DATE, 'ETL_USER', CURRENT_DATE, CURRENT_DATE, '9999-12-31T23:59:59Z'
            ) RETURNING vector_catalogue_id
        ),
        ds_id AS (
            INSERT INTO data_source (
                data_source_id,
                data_format_code,
                name,
                description,
                source_url,
                source_object_name,
                data_table_name,
                source_object_id,
                create_user, create_date, update_user, update_date, effective_date, expiry_date
            ) VALUES (
                NEXTVAL(pg_get_serial_sequence('data_source','data_source_id')),
                'json',
                'First Nation Community Locations',
                'This spatial dataset contains the approximate locations of First Nations in British Columbia. Locations are based on the location of the main community, as obtained from Aboriginal Affairs and Northern Development Canada (AANDC). This data includes 6 Yukon or NWT bands that have parts of their traditional territories in B.C. and have been accepted into the BC treaty process. This is a multipoint feature. LIMITATONS: Although every attempt has been made to ensure that this data is accurate and complete, some First Nations may be missing or inaccurately positioned. The First Nations themselves should be contacted for the definitive locations.',
                'https://catalogue.data.gov.bc.ca/dataset/first-nation-community-locations',
                'WHSE_HUMAN_CULTURAL_ECONOMIC.FN_COMMUNITY_LOCATIONS_SP',
                'fn_community_locations',
                'COMMUNITY_LOCATION_ID',
                'ETL_USER', CURRENT_DATE, 'ETL_USER', CURRENT_DATE, CURRENT_DATE, '9999-12-31T23:59:59Z'
            ) RETURNING data_source_id
        )
        INSERT INTO display_catalogue (
            display_data_name,
            display_name,
            label_column,
            label,
            highlight_columns,
            vector_catalogue_id,
            data_source_id,
            layer_category_code,
            mapbox_layer_id,
            create_user, create_date, update_user, update_date, effective_date, expiry_date
        ) SELECT
            'fn_community_locations',
            'First Nation Community Locations',
            'FIRST_NATION_BC_NAME',
            'Name of Band or First Nation',
            ARRAY[
                'FIRST_NATION_BC_NAME', 'URL_TO_BC_WEBSITE', 'PREFERRED_NAME', 'LANGUAGE_GROUP'
            ],
            vc_id.vector_catalogue_id,
            ds_id.data_source_id,
            'LAND_TENURE',
            'iit-water.first-nations',
            'ETL_USER', CURRENT_DATE, 'ETL_USER', CURRENT_DATE, CURRENT_DATE, '9999-12-31T23:59:59Z'
        FROM vc_id, ds_id ;
    """)

    # populate fn_treaty_areas info
    op.execute("""
    WITH vc_id AS (
                INSERT INTO vector_catalogue (
                vector_catalogue_id,
                description, 
                vector_name,
                create_user, create_date, update_user, update_date, effective_date, expiry_date
            ) VALUES (
                NEXTVAL(pg_get_serial_sequence('vector_catalogue','vector_catalogue_id')),
                'First Nations Treaty Areas', 
                'fn_treaty_areas',
                'ETL_USER', CURRENT_DATE, 'ETL_USER', CURRENT_DATE, CURRENT_DATE, '9999-12-31T23:59:59Z'
            ) RETURNING vector_catalogue_id
        ),
        ds_id AS (
            INSERT INTO data_source (
                data_source_id,
                data_format_code,
                name,
                description,
                source_url,
                source_object_name,
                data_table_name,
                source_object_id,
                create_user, create_date, update_user, update_date, effective_date, expiry_date
            ) VALUES (
                NEXTVAL(pg_get_serial_sequence('data_source','data_source_id')),
                'json',
                'First Nation Treaty Areas',
                'This layer contains the areas within which the First Nation has a role (as described in the treaty) related to economic activities, governance activities and cultural activities.',
                'https://catalogue.data.gov.bc.ca/dataset/first-nations-treaty-areas',
                'WHSE_LEGAL_ADMIN_BOUNDARIES.FNT_TREATY_AREA_SP',
                'fn_treaty_areas',
                'TREATY_AREA_ID',
                'ETL_USER', CURRENT_DATE, 'ETL_USER', CURRENT_DATE, CURRENT_DATE, '9999-12-31T23:59:59Z'
            ) RETURNING data_source_id
        )
        INSERT INTO display_catalogue (
            display_data_name,
            display_name,
            label_column,
            label,
            highlight_columns,
            vector_catalogue_id,
            data_source_id,
            layer_category_code,
            mapbox_layer_id,
            create_user, create_date, update_user, update_date, effective_date, expiry_date
        ) SELECT
            'fn_treaty_areas',
            'First Nations Treaty Areas',
            'TREATY',
            'First Nation or First Nations Organization',
            ARRAY[
                'TREATY', 'FIRST_NATION_NAME', 'LAND_TYPE', 'GEOGRAPHIC_LOCATION', 'AREA_TYPE', 'EFFECTIVE_DATE', 'COMMENTS'
            ],
            vc_id.vector_catalogue_id,
            ds_id.data_source_id,
            'LAND_TENURE',
            'iit-water.first-nations',
            'ETL_USER', CURRENT_DATE, 'ETL_USER', CURRENT_DATE, CURRENT_DATE, '9999-12-31T23:59:59Z'
        FROM vc_id, ds_id ;
    """)

    # populate fn_treaty_lands info
    op.execute("""
    WITH vc_id AS (
                INSERT INTO vector_catalogue (
                vector_catalogue_id,
                description, 
                vector_name,
                create_user, create_date, update_user, update_date, effective_date, expiry_date
            ) VALUES (
                NEXTVAL(pg_get_serial_sequence('vector_catalogue','vector_catalogue_id')),
                'First Nations Treaty Lands', 
                'fn_treaty_lands',
                'ETL_USER', CURRENT_DATE, 'ETL_USER', CURRENT_DATE, CURRENT_DATE, '9999-12-31T23:59:59Z'
            ) RETURNING vector_catalogue_id
        ),
        ds_id AS (
            INSERT INTO data_source (
                data_source_id,
                data_format_code,
                name,
                description,
                source_url,
                source_object_name,
                data_table_name,
                source_object_id,
                create_user, create_date, update_user, update_date, effective_date, expiry_date
            ) VALUES (
                NEXTVAL(pg_get_serial_sequence('data_source','data_source_id')),
                'json',
                'First Nations Treaty Lands',
                'This layer shows the lands that are owned by the First Nation as a result of the treaty and over which the First Nation has governance as described in the treaty. These boundaries should be treated as cartographic representations only. The official versions of these boundaries are contained within the treaty documents.',
                'https://catalogue.data.gov.bc.ca/dataset/first-nations-treaty-lands',
                'WHSE_LEGAL_ADMIN_BOUNDARIES.FNT_TREATY_LAND_SP',
                'fn_treaty_lands',
                'TREATY_LAND_ID',
                'ETL_USER', CURRENT_DATE, 'ETL_USER', CURRENT_DATE, CURRENT_DATE, '9999-12-31T23:59:59Z'
            ) RETURNING data_source_id
        )
        INSERT INTO display_catalogue (
            display_data_name,
            display_name,
            label_column,
            label,
            highlight_columns,
            vector_catalogue_id,
            data_source_id,
            layer_category_code,
            mapbox_layer_id,
            create_user, create_date, update_user, update_date, effective_date, expiry_date
        ) SELECT
            'fn_treaty_lands',
            'First Nations Treaty Lands',
            'TREATY',
            'First Nation or First Nations Organization',
            ARRAY[
                'TREATY', 'FIRST_NATION_NAME', 'LAND_TYPE', 'EFFECTIVE_DATE', 'COMMENTS'
            ],
            vc_id.vector_catalogue_id,
            ds_id.data_source_id,
            'LAND_TENURE',
            'iit-water.first-nations',
            'ETL_USER', CURRENT_DATE, 'ETL_USER', CURRENT_DATE, CURRENT_DATE, '9999-12-31T23:59:59Z'
        FROM vc_id, ds_id ;
    """)

    op.execute('SET search_path TO public')    
    
    
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    return
    # ### end Alembic commands ###
