"""add stream table2

Revision ID: 1d3a9bfe6150
Revises: ab7b5daedfbd
Create Date: 2019-11-13 23:00:16.396897

"""
from alembic import op
import sqlalchemy as sa
import geoalchemy2
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '1d3a9bfe6150'
down_revision = 'a2b8d50d796d'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('fwa_stream_networks',
                    sa.Column('OGC_FID', sa.INTEGER(), autoincrement=True, nullable=False),
                    sa.Column('LINEAR_FEATURE_ID', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('WATERSHED_GROUP_ID', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('EDGE_TYPE', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('BLUE_LINE_KEY', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('WATERSHED_KEY', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('FWA_WATERSHED_CODE', sa.VARCHAR(), autoincrement=False, nullable=True),
                    sa.Column('LOCAL_WATERSHED_CODE', sa.VARCHAR(), autoincrement=False, nullable=True),
                    sa.Column('WATERSHED_GROUP_CODE', sa.VARCHAR(), autoincrement=False, nullable=True),
                    sa.Column('DOWNSTREAM_ROUTE_MEASURE', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
                    sa.Column('LENGTH_METRE', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
                    sa.Column('FEATURE_SOURCE', sa.VARCHAR(), autoincrement=False, nullable=True),
                    sa.Column('GNIS_ID', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('GNIS_NAME', sa.VARCHAR(), autoincrement=False, nullable=True),
                    sa.Column('LEFT_RIGHT_TRIBUTARY', sa.VARCHAR(), autoincrement=False, nullable=True),
                    sa.Column('STREAM_ORDER', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('STREAM_MAGNITUDE', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('WATERBODY_KEY', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('BLUE_LINE_KEY_50K', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('WATERSHED_CODE_50K', sa.VARCHAR(), autoincrement=False, nullable=True),
                    sa.Column('WATERSHED_KEY_50K', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('WATERSHED_GROUP_CODE_50K', sa.VARCHAR(), autoincrement=False, nullable=True),
                    sa.Column('GRADIENT', sa.VARCHAR(), autoincrement=False, nullable=True),
                    sa.Column('FEATURE_CODE', sa.VARCHAR(), autoincrement=False, nullable=True),
                    sa.Column('OBJECTID', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('SE_ANNO_CAD_DATA', sa.VARCHAR(), autoincrement=False, nullable=True),
                    sa.Column('FEATURE_LENGTH_M', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
                    sa.Column('GEOMETRY.LEN', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('fme_feature_type', sa.VARCHAR(), autoincrement=False, nullable=True),
                    sa.Column('GEOMETRY', geoalchemy2.types.Geometry(geometry_type='LINESTRINGZ', srid=4326), autoincrement=False, nullable=True),
                    sa.PrimaryKeyConstraint('OGC_FID', name='fwa_stream_networks_pkey')
                    )
    op.create_index('fwa_stream_networks_geom_geom_idx', 'fwa_stream_networks', ['GEOMETRY'], unique=False, postgresql_using="gist")

    # add metadata for this layer.
    op.execute('SET search_path TO metadata')

    # add sequences to columns that are missing them.
    op.execute("""
        CREATE SEQUENCE vector_catalogue_id_seq;
        CREATE SEQUENCE data_source_id_seq;

        SELECT setval('vector_catalogue_id_seq', COALESCE((SELECT MAX(vector_catalogue_id)+1 FROM vector_catalogue), 1), false);
        SELECT setval('data_source_id_seq', COALESCE((SELECT MAX(data_source_id)+1 FROM data_source), 1), false);

        ALTER TABLE vector_catalogue ALTER COLUMN vector_catalogue_id SET DEFAULT NEXTVAL('vector_catalogue_id_seq');
        ALTER TABLE data_source ALTER COLUMN data_source_id SET DEFAULT NEXTVAL('data_source_id_seq');

        ALTER SEQUENCE vector_catalogue_id_seq OWNED BY vector_catalogue.vector_catalogue_id;
        ALTER SEQUENCE data_source_id_seq OWNED BY data_source.data_source_id;
    """)

    # populate stream layer info
    op.execute("""
    WITH vc_id AS (
                INSERT INTO vector_catalogue (
                vector_catalogue_id,
                description, 
                vector_name,
                create_user, create_date, update_user, update_date, effective_date, expiry_date
            ) VALUES (
                NEXTVAL(pg_get_serial_sequence('vector_catalogue','vector_catalogue_id')),
                'Freshwater Atlas Stream Networks', 
                'fwa_stream_networks',
                'ETL_USER', CURRENT_DATE, 'ETL_USER', CURRENT_DATE, CURRENT_DATE, '9999-12-31T23:59:59Z'
            ) RETURNING vector_catalogue_id
        ),

        ds_id AS (
            INSERT INTO data_source (
                data_source_id,
                data_format_code,
                name,
                description,
                source_url,
                source_object_name,
                data_table_name,
                source_object_id,
                create_user, create_date, update_user, update_date, effective_date, expiry_date
            ) VALUES (
                NEXTVAL(pg_get_serial_sequence('data_source','data_source_id')),
                'json',
                'Freshwater Atlas Stream Networks',
                'Flow network arcs (observed, inferred and constructed). Contains no banks, coast or watershed bourdary arcs. Directionalized and connected. Contains heirarchial key and route identifier.',
                'https://catalogue.data.gov.bc.ca/dataset/freshwater-atlas-stream-network',
                'WHSE_BASEMAPPING.FWA_STREAM_NETWORKS_SP',
                'fwa_stream_networks',
                'LINEAR_FEATURE_ID',
                'ETL_USER', CURRENT_DATE, 'ETL_USER', CURRENT_DATE, CURRENT_DATE, '9999-12-31T23:59:59Z'
            ) RETURNING data_source_id
        )

        INSERT INTO display_catalogue (
            display_data_name,
            display_name,
            label_column,
            label,
            highlight_columns,
            vector_catalogue_id,
            data_source_id,
            layer_category_code,
            mapbox_layer_id,
            required_map_properties,
            create_user, create_date, update_user, update_date, effective_date, expiry_date
        ) SELECT
            'fwa_stream_networks',
            'Freshwater Atlas Stream Networks',
            'LINEAR_FEATURE_ID',
            'Feature ID',
            ARRAY[
                'STREAM_ORDER', 'STREAM_MAGNITUDE', 'FEATURE_LENGTH_M', 'WATERSHED_GROUP_ID'
            ],
            vc_id.vector_catalogue_id,
            ds_id.data_source_id,
            'FRESHWATER_MARINE',
            'iit-water.fwa-streams',
            ARRAY[
                'LINEAR_FEATURE_ID', 'FWA_WATERSHED_CODE', 'LOCAL_WATERSHED_CODE'
            ],
            'ETL_USER', CURRENT_DATE, 'ETL_USER', CURRENT_DATE, CURRENT_DATE, '9999-12-31T23:59:59Z'
        FROM vc_id, ds_id ;
    """)

    op.execute('SET search_path TO public')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    return
